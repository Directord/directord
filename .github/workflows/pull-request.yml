name: Run pull-request workflow
on: [pull_request]
jobs:
  auto_blacken:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install black
      - name: If needed, commit black changes to the pull request
        run: |
          if ! black --line-length 79 --safe --target-version py38 --check .; then
            black --line-length 79 --safe --target-version py38 .
            git config --global user.name '${{ github.event.pull_request.user.login }}'
            git config --global user.email '${{ github.event.pull_request.user.login }}@users.noreply.github.com'
            git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
            git commit -am "FIX: Auto format Python code with Black"
            git push
          fi

  container_build_check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build new directord container
      run: docker build -t directord -f Containerfile .

  functional_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Run install
        run: sudo bash tools/prod-setup.sh
      - name: Re-install self
        run: sudo /opt/directord/bin/pip install --upgrade '.[all]'
      - name: Run server service install
        run: |
          sudo /opt/directord/bin/directord-server-systemd
          sudo systemctl daemon-reload
          sudo systemctl restart directord-server
      - name: Run client service install
        run: |
          sudo /opt/directord/bin/directord-client-systemd
          sudo systemctl daemon-reload
          sudo systemctl restart directord-client
      - name: Execute functional check
        run: |
          cd /opt/directord/share/directord/orchestrations
          if ! JOBS=$(sudo /opt/directord/bin/directord \
                      orchestrate \
                      functional-tests.yaml \
                      podman.yaml \
                      --poll \
                      --check); then
            echo ${JOBS} | xargs -n 1 sudo /opt/directord/bin/directord manage --job-info
            exit 1
          fi
      - name: Execute pod play check
        run: |
          if ! JOBS=$(sudo /opt/directord/bin/directord \
                      exec \
                      --verb POD \
                      '--play /opt/directord/share/directord/pods/pod-directord-test-pod.yaml' \
                      --poll \
                      --check); then
            echo ${JOBS} | xargs -n 1 sudo /opt/directord/bin/directord manage --job-info
            exit 1
          fi
          sleep 2
          if ! sudo podman pod exists directord-test-pod; then
            echo -e "FAILURE - [ directord-test-pod ] did not exist on the system."
            exit 1
          fi

      - name: Create an exec container and check
        run: |
          if ! JOBS=$(sudo /opt/directord/bin/directord \
                      exec \
                      --verb POD \
                      '--exec-run directord-test-pod-directord-server-1 --env TEST0=hello,TEST1=world --command "/usr/bin/echo ${TEST0} ${TEST1}"' \
                      --poll \
                      --check); then
            echo ${JOBS} | xargs -n 1 sudo /opt/directord/bin/directord manage --job-info
            exit 1
          fi
      - name: Execute pod kill check
        run: |
          if ! JOBS=$(sudo /opt/directord/bin/directord \
                      exec \
                      --verb POD \
                      '--signal SIGKILL --kill directord-test-pod' \
                      --poll \
                      --check); then
            echo ${JOBS} | xargs -n 1 sudo /opt/directord/bin/directord manage --job-info
            exit 1
          fi
      - name: Execute pod rm check
        run: |
          if ! JOBS=$(sudo /opt/directord/bin/directord \
                      exec \
                      --verb POD \
                      '--force --rm directord-test-pod' \
                      --poll \
                      --check); then
            echo ${JOBS} | xargs -n 1 sudo /opt/directord/bin/directord manage --job-info
            exit 1
          fi
          sleep 2
          if sudo podman pod exists directord-test-pod; then
            echo -e "FAILURE - [ directord-test-pod ] was still active on the system"
            exit 1
          fi

  functional_bootstrap_check:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Run install
        run: sudo bash tools/prod-setup.sh
      - name: Re-install self
        run: sudo /opt/directord/bin/pip install --upgrade '.[all]'
      - name: Ensure ssh is installed
        run: sudo apt update; sudo apt -y install openssh-server
      - name: Check config
        run: |
          cat > sshd_config <<EOF
            SyslogFacility AUTHPRIV
            PermitRootLogin yes
            AuthorizedKeysFile	.ssh/authorized_keys
            PasswordAuthentication yes
            ChallengeResponseAuthentication no
            UsePAM yes
            UseDNS no
            X11Forwarding no
            PrintMotd no
          EOF
          sudo mv sshd_config /etc/ssh/sshd_config
          sudo systemctl restart ssh
      - name: Create ssh key
        run: >
          ssh-keygen -t rsa -b 4096 -N '' -f ~/.ssh/id_rsa
      - name: Add key to auth file
        run: >
          cat ~/.ssh/id_rsa.pub | tee -a ~/.ssh/authorized_keys
      - name: Ensure the owner of the key is correct
        run: |
          chmod 600 ~/.ssh/authorized_keys
          chmod 700 ~/.ssh
          sudo chmod -c 0755 ~/
          ls -la ~/.ssh
      - name: Test SSH connection to localhost
        run: >
          ssh -vvv -i ~/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $(whoami)@localhost
      - name: Run bootstrap test
        run: |
          /opt/directord/bin/directord --debug \
                                       bootstrap \
                                       --catalog tools/directord-inventory-catalog.yaml \
                                       --catalog tools/directord-prod-bootstrap-catalog.yaml \
                                       --key-file ~/.ssh/id_rsa

  py_lint_and_unittest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install '.[all]' --upgrade
    - name: Test with py-unittest
      run: |
        coverage run -a -m unittest
        coverage report -m --omit="*/test*" --fail-under=70
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --show-source --max-complexity=25 --max-line-length=79 --statistics --benchmark --ignore=H104,W503
